version: "3.9"

services:
  db:
    image: postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB_NAME: ${DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ${PWD}/services/db/:/docker-entrypoint-initdb.d/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  client:
    build:
      context: ${PWD}/services/client
    environment:
      REACT_APP_API_URL: http://localhost:8000/rest
    ports:
      - "3000:3000"
    volumes:
      - ${PWD}/services/client/:/app
    entrypoint: >
      sh -c "yarn start"
    depends_on:
      - rest

  rest:
    build:
      context: ${PWD}/services/rest
    environment:
      DJANGO_DEBUG: ${DJANGO_DEBUG}
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DB_NAME: ${DB_NAME}
      DB_TEST_NAME: ${DB_TEST_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
    ports:
      - "8000:8000"
    volumes:
      - ${PWD}/services/rest/:/app
    entrypoint: >
      sh -c "python manage.py flush --no-input
             python manage.py migrate
             python manage.py loaddata users accounts
             python manage.py runserver 0.0.0.0:8000"
    depends_on:
      db:
        condition: service_healthy

volumes:
  pgdata: