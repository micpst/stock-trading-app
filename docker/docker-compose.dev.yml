version: "3.9"

services:
  db:
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB_NAME: ${POSTGRES_DB_NAME}
      POSTGRES_DB_TEST_NAME: ${POSTGRES_DB_TEST_NAME}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ${PWD}/services/db/:/docker-entrypoint-initdb.d/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
  rest:
    build:
      context: ${PWD}/services/rest
      dockerfile: docker/Dockerfile
    environment:
      DJANGO_DEBUG: ${DJANGO_DEBUG}
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DJANGO_DB_NAME: ${POSTGRES_DB_NAME}
      DJANGO_DB_TEST_NAME: ${POSTGRES_DB_TEST_NAME}
      DJANGO_DB_USER: ${POSTGRES_USER}
      DJANGO_DB_PASSWORD: ${POSTGRES_PASSWORD}
      DJANGO_DB_HOST: ${POSTGRES_HOST}
      DJANGO_DB_PORT: ${POSTGRES_PORT}
    ports:
      - "8000:8000"
    volumes:
      - ${PWD}/services/rest/:/code
    command: >
      sh -c "python manage.py flush --no-input
             python manage.py migrate
             python manage.py loaddata users accounts
             python manage.py runserver 0.0.0.0:8000"
    depends_on:
      db:
        condition: service_healthy

volumes:
  pgdata: